package zk

import (
	"math/big"

	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	bn254 "github.com/consensys/gnark-crypto/ecc/bn254/twistededwards"
)

var Base = bn254.GetEdwardsCurve().Base
var VKStr = "96361D0967EB67D2DEDD21E06BA83A6ACC82A73D7D95FD0ED9B94633683A5049960C70C318C6DDD3CF71E2479B7362C5541523DA11409B85772D993A71A19902E23E8910B73C8CBDAB98F9260A541D44F67E9931D0597DDBD8FDDA61D8B94E9C237908DD79C05ED16C134DDA97C0FF5B607475F7A9EB2E715BDD2D712C71D229D0E327E2F20329B92C18442907584E206A86F62BFBFA48B1B183232157A113600CEA58F866D8C73FA03D2F9C38E8D59F32685C55C2116C1ABBB0609E516B4C68D1E97286902582553D5C99665619FEF09F579BB6B8276246E2087018339625FBAC8C87D781F6AB1C24F5B7B5FFA2D4BE66880037AE1DC8BC3B8996C464B8C7A32B1D19EF00B62B8CD628CF329ABD2169D66D95423700C64C2B0F416CB0A7634300000024A0F5D3A357D2D8718809D70251C88740D8B30768D9F1D82A513C0587184E3065C49AE66A4EBF62B6F553CD9099DF0FCB989BFD9E960E870241710B68A3D414318D5B16460DC0E0B68FE13BD5569F2CDE3858D4CD69964A8E2153307076925D52898E3D4A10D5C7EE7C57ACE669732598099DE9804A34306AFF5C7261389A859194111B43B0E1B320E80B1F5744343B75C1EEBF979A848BFFB7A6CC3444D57DEFC7DF63296F5DAEA6532145123336C2C70C2A070D0A24A6B7AF5208458ED129B390EF7ED62B419BABD5F9E438ABE7B138ED82FACA7AA79F89B8756272753582E293BB76D0EE48E511DC5F2E0869F186AC2B5C67343C7BE6C4D97E53A76A8E4132A90A77437ED4340A91E9680CF4BB1F28D31DD23BE2A8F21E9F5653537CE2AADBC28F5755F1F2CD95F496603DC19AA73B27ECBC24711591600855C722A216C917ADC74237BD77030260608232F1753153BC2A04B20B4B3836ED2EA5D8E0C1C596DBA55CCE41F15EA91890B711D619928CC748EC849DA4D3D9D95062987220DCC59AF6035A2ABB475C51A1787B228E5CE37209E8D586EA2251F781EB588FF6661EA35EF300C6BEFF69D19B80FDBD09B70C628023B86A6F29D8C23941F11D09D3BAC19DCB0201A37043852FB5E72B6C0341DFEA1DE45E6104BB0396A2B035CA3448A865D17197D783C3DFFB0A81C72281159F3C5B0F3F731A19A89A069A199EA125AAAC84E9D4FDD9211E757645446153E6F39D4BF74728E2BCB9986C402F5D1C3E84E4E63DD588295D679DA7B0918079765C4339B058B82D713CFF3861BD270331827070D284BDB048404608C55461F18410CAC553CCE3FF97015685B5F978F9E8866C6AA18BAD64966E3E1402A3C4C20C226FF4778EB67C26B45D45AE72C19D758CDE62BBADAE0911645B5658FE83073DD90410D09435807F67979F4A8CBC934985B1EC2C021028ECCDBA91D4F08C9ADCD90E78B586555E486D407A9218408B69CDE43951DA6F8955178387FA519F134D6A538BC6D3AC084F9FB37EA632080FADEEAFD3DC3A0F8108EDC820952A51B8A9D5B11DE15DA22E2331328834A0F9D51388754D3B1CD8FEA058DA94891D5ED4E8D7017AEF27C646BC3FAF90ADE5FBB865D1207AD56E3ED6A11133C3D34FBD57CA2D0FB424A284C2FF55320DBB7D134A7E925D65FBD4E05F6A96E36541A4083C34096FF217751CAF8973585FD262AA2912A96EE0BD36E6817EA5E74227D47629B19D0AC8C09C899B9987482550F6E6B4F0D2E46F59EDAC54FC7F6F8C2F08F910437F9D43C2110C38CAF14790D7A49E9564DA76D6109FFD3051AE7D51D1192C3D7156BFE7837D6FE2A10DF470CD95799434E9C266839D54042F3B6FD90119ED9C434FD678A68A0DEFDEF26A19892D6C2470D6F1A198EA0FC978BDF36BFF281977EBA9E6AAA7A03B0DCD63B58757D00FF04BDD5A60C1CE9ABCAD75F18C880D09111840C65AA077C2074ACD5AE92658925E11C3E4551FA9D713108F1766061D363A8BE8EF60EF84D86F8857C7F9FB12F55B0BC733525A7EFFB5F73246CE078A67C330145D6F2912BB62A1C0AFB5AC635CCA77C6B0F6289BC09563887FE5CD76A0BCAA3F0EF16F15291DFAEE650DF3F1E578A90000000000000000"

type ElGamal struct {
	Left  *bn254.PointAffine
	Right *bn254.PointAffine
}

type Votes struct {
	ElGamals [COUNT]*ElGamal
}

func NewElGamal(p1, p2 *bn254.PointAffine) *ElGamal {
	p := new(ElGamal)
	p.Left = p1
	p.Right = p2

	return p
}

func NewPoint(x, y *fr.Element) *bn254.PointAffine {
	p := new(bn254.PointAffine)
	p.X = *x
	p.Y = *y

	return p
}

func CreateElGamal(message *big.Int, publicKey *bn254.PointAffine, random *big.Int) *ElGamal {
	left := new(bn254.PointAffine).ScalarMultiplication(&Base, random)
	right := new(bn254.PointAffine).Add(
		new(bn254.PointAffine).ScalarMultiplication(&Base, message),
		new(bn254.PointAffine).ScalarMultiplication(publicKey, random))

	return NewElGamal(left, right)
}

func CreateVotes(message, random []*big.Int, publicKey *bn254.PointAffine) *Votes {
	votes := new(Votes)
	for i := 0; i < COUNT; i++ {
		votes.ElGamals[i] = CreateElGamal(message[i], publicKey, random[i])
	}

	return votes
}

func AddVotes(oldVotes, addVotes *Votes) *Votes {
	newVotes := new(Votes)
	for i := 0; i < COUNT; i++ {
		newVotes.ElGamals[i] = new(ElGamal)
		newVotes.ElGamals[i].Left = new(bn254.PointAffine).Add(oldVotes.ElGamals[i].Left, addVotes.ElGamals[i].Left)
		newVotes.ElGamals[i].Right = new(bn254.PointAffine).Add(oldVotes.ElGamals[i].Right, addVotes.ElGamals[i].Right)
	}

	return newVotes
}
