import { time, loadFixture } from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import hre from "hardhat";

describe("Lock", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function deployFixture() {
    const [owner, otherAccount] = await hre.ethers.getSigners();

    const Contract = await hre.ethers.getContractFactory("AGYSOHelper");
    const contract = await Contract.deploy();

    return { contract, owner, otherAccount };
  }

  describe("Deployment", function () {
    it("Should parser public input", async function () {
      const { contract } = await loadFixture(deployFixture);

      const pubInpHex =
        "0x00000023000000000000002300000000000000000000000000000000000000000000000000000000000000052075e142033556b9b9acc9d65882f7e26323a8ab9a6a1bc357cd1dc7af191f8a14676118d3d8b4f67c4b10b81ae407a7c0588cc2f339f5db3a6e0a7a89a49bb7cb0403364120a92c69243b024da952443b9e5b5388bd3e02a694f360eaaba1a26c3433134dd4565dc88221346681716697a06ec87d07234f686e1b21f31000a4c9aa7209a6bb496301886fac340e24e1fe37c226ec9614fefc73d87ad1c0d2fa05c8b7505328c3cf773853b46d967cee5c589ba3f909c755b66968539cd2a24ee446ec9a66a2d9899629ee2db0438b8081d1989b7c9690110e20af69ee2e608c60cbd95549b444a34ee5dd1e7c9d1a332788bf9fa89b3aece313a6d9ff3f723f635a1a01585fd6b1a256276d71006167568b76734164580abbc094c80553617a34876bfc663951f60dd9468cc1e41f2a21de0f24417f716bbb146a3235acf30194fe0268da84ba00c303a894592d1a581000a6c4bcf26336e395b4c4f5bbd1267489d429970ef1f459b6341628dad040a6e4cce6768773404619450fdfb522bee8aa7d5047211895419c72ce7d4e45eb88d4a39bfd17cd08ac316c962eb3026f568e0d6602f355c7633fbf31a098ae29a5b1696a9502ca8af47801564cd441dd311c971be1f12c784de52489ea4b16ec7ad9646520e3030b8627f421624a7035c13282af7f8699bdc402f716800b0b654e450022bf99fa29fa53e45a79dc21296adbf2af40d7e0ff45594b4bd3cfb04a5f9e0d98b1a9f7a25471c312d5b4b281f060066a1ac9c0eaa163a5c0ce111a0970620970b694b5fa0c27749900620";

      let ret = await contract.parseAndSetBallots(pubInpHex, 1240 / 2, 2264 / 2);

      let ballotBox = await contract.getBallotBox();
      console.log(ballotBox);

      await contract.finishElection();

      let emptyBallotBox = await contract.getBallotBox();

      console.log(`emptyBallotBox: ${emptyBallotBox}`);
    });
  });
});
